{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport View from \"react-native-web/dist/exports/View\";\nimport InteractionManager from \"react-native-web/dist/exports/InteractionManager\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport Animated from 'react-native-reanimated';\nimport { PanGestureHandler, TapGestureHandler, GestureState } from \"./GestureHandler\";\nimport Overlay from \"./Overlay\";\nvar Clock = Animated.Clock,\n    Value = Animated.Value,\n    onChange = Animated.onChange,\n    clockRunning = Animated.clockRunning,\n    startClock = Animated.startClock,\n    stopClock = Animated.stopClock,\n    spring = Animated.spring,\n    abs = Animated.abs,\n    add = Animated.add,\n    and = Animated.and,\n    block = Animated.block,\n    call = Animated.call,\n    cond = Animated.cond,\n    divide = Animated.divide,\n    eq = Animated.eq,\n    event = Animated.event,\n    greaterThan = Animated.greaterThan,\n    lessThan = Animated.lessThan,\n    max = Animated.max,\n    min = Animated.min,\n    multiply = Animated.multiply,\n    neq = Animated.neq,\n    or = Animated.or,\n    set = Animated.set,\n    sub = Animated.sub;\nvar TRUE = 1;\nvar FALSE = 0;\nvar NOOP = 0;\nvar UNSET = -1;\nvar DIRECTION_LEFT = 1;\nvar DIRECTION_RIGHT = -1;\nvar SWIPE_DISTANCE_THRESHOLD_DEFAULT = 60;\nvar SWIPE_DISTANCE_MINIMUM = 5;\nvar SPRING_CONFIG = {\n  stiffness: 1000,\n  damping: 500,\n  mass: 3,\n  overshootClamping: true,\n  restDisplacementThreshold: 0.01,\n  restSpeedThreshold: 0.01\n};\nvar ANIMATED_ONE = new Animated.Value(1);\n\nvar DrawerView = function (_React$Component) {\n  _inherits(DrawerView, _React$Component);\n\n  var _super = _createSuper(DrawerView);\n\n  function DrawerView() {\n    var _this;\n\n    _classCallCheck(this, DrawerView);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"handleEscape\", function (e) {\n      var _this$props = _this.props,\n          open = _this$props.open,\n          onClose = _this$props.onClose;\n\n      if (e.key === 'Escape') {\n        if (open) {\n          onClose();\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleEndInteraction\", function () {\n      if (_this.interactionHandle !== undefined) {\n        InteractionManager.clearInteractionHandle(_this.interactionHandle);\n        _this.interactionHandle = undefined;\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleStartInteraction\", function () {\n      if (_this.interactionHandle === undefined) {\n        _this.interactionHandle = InteractionManager.createInteractionHandle();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getDrawerWidth\", function () {\n      var _this$props2 = _this.props,\n          drawerStyle = _this$props2.drawerStyle,\n          dimensions = _this$props2.dimensions;\n\n      var _StyleSheet$flatten = StyleSheet.flatten(drawerStyle),\n          width = _StyleSheet$flatten.width;\n\n      if (typeof width === 'string' && width.endsWith('%')) {\n        var percentage = Number(width.replace(/%$/, ''));\n\n        if (Number.isFinite(percentage)) {\n          return dimensions.width * (percentage / 100);\n        }\n      }\n\n      return typeof width === 'number' ? width : 0;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"clock\", new Clock());\n\n    _defineProperty(_assertThisInitialized(_this), \"interactionHandle\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"isDrawerTypeFront\", new Value(_this.props.drawerType === 'front' ? TRUE : FALSE));\n\n    _defineProperty(_assertThisInitialized(_this), \"isOpen\", new Value(_this.props.open ? TRUE : FALSE));\n\n    _defineProperty(_assertThisInitialized(_this), \"nextIsOpen\", new Value(UNSET));\n\n    _defineProperty(_assertThisInitialized(_this), \"isSwiping\", new Value(FALSE));\n\n    _defineProperty(_assertThisInitialized(_this), \"initialDrawerWidth\", _this.getDrawerWidth());\n\n    _defineProperty(_assertThisInitialized(_this), \"gestureState\", new Value(GestureState.UNDETERMINED));\n\n    _defineProperty(_assertThisInitialized(_this), \"touchX\", new Value(0));\n\n    _defineProperty(_assertThisInitialized(_this), \"velocityX\", new Value(0));\n\n    _defineProperty(_assertThisInitialized(_this), \"gestureX\", new Value(0));\n\n    _defineProperty(_assertThisInitialized(_this), \"offsetX\", new Value(0));\n\n    _defineProperty(_assertThisInitialized(_this), \"position\", new Value(_this.props.open ? _this.initialDrawerWidth * (_this.props.drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT) : 0));\n\n    _defineProperty(_assertThisInitialized(_this), \"containerWidth\", new Value(_this.props.dimensions.width));\n\n    _defineProperty(_assertThisInitialized(_this), \"drawerWidth\", new Value(_this.initialDrawerWidth));\n\n    _defineProperty(_assertThisInitialized(_this), \"drawerOpacity\", new Value(_this.initialDrawerWidth || _this.props.drawerType === 'permanent' ? 1 : 0));\n\n    _defineProperty(_assertThisInitialized(_this), \"drawerPosition\", new Value(_this.props.drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT));\n\n    _defineProperty(_assertThisInitialized(_this), \"touchDistanceFromDrawer\", cond(_this.isDrawerTypeFront, cond(eq(_this.drawerPosition, DIRECTION_LEFT), max(sub(sub(_this.touchX, _this.gestureX), _this.drawerWidth), 0), min(multiply(sub(sub(_this.containerWidth, _this.drawerWidth), sub(_this.touchX, _this.gestureX)), DIRECTION_RIGHT), 0)), 0));\n\n    _defineProperty(_assertThisInitialized(_this), \"swipeDistanceThreshold\", new Value(_this.props.swipeDistanceThreshold !== undefined ? _this.props.swipeDistanceThreshold : SWIPE_DISTANCE_THRESHOLD_DEFAULT));\n\n    _defineProperty(_assertThisInitialized(_this), \"swipeVelocityThreshold\", new Value(_this.props.swipeVelocityThreshold));\n\n    _defineProperty(_assertThisInitialized(_this), \"currentOpenValue\", _this.props.open);\n\n    _defineProperty(_assertThisInitialized(_this), \"pendingOpenValue\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"isStatusBarHidden\", false);\n\n    _defineProperty(_assertThisInitialized(_this), \"manuallyTriggerSpring\", new Value(FALSE));\n\n    _defineProperty(_assertThisInitialized(_this), \"transitionTo\", function (isOpen) {\n      var toValue = new Value(0);\n      var frameTime = new Value(0);\n      var state = {\n        position: _this.position,\n        time: new Value(0),\n        finished: new Value(FALSE),\n        velocity: new Value(0)\n      };\n      return block([cond(clockRunning(_this.clock), NOOP, [set(toValue, multiply(isOpen, _this.drawerWidth, _this.drawerPosition)), set(frameTime, 0), set(state.time, 0), set(state.finished, FALSE), set(state.velocity, _this.velocityX), set(_this.isOpen, isOpen), startClock(_this.clock), call([], _this.handleStartInteraction), set(_this.manuallyTriggerSpring, FALSE)]), spring(_this.clock, state, _objectSpread(_objectSpread({}, SPRING_CONFIG), {}, {\n        toValue: toValue\n      })), cond(state.finished, [set(_this.touchX, 0), set(_this.gestureX, 0), set(_this.velocityX, 0), set(_this.offsetX, 0), stopClock(_this.clock), call([_this.isOpen], function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 1),\n            value = _ref2[0];\n\n        var open = Boolean(value);\n\n        _this.handleEndInteraction();\n\n        if (open !== _this.props.open) {\n          _this.toggleDrawer(_this.props.open);\n        }\n      })])]);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"dragX\", block([onChange(_this.isOpen, call([_this.isOpen], function (_ref3) {\n      var _ref4 = _slicedToArray(_ref3, 1),\n          value = _ref4[0];\n\n      var open = Boolean(value);\n      _this.currentOpenValue = open;\n\n      if (open !== _this.props.open) {\n        if (open) {\n          _this.props.onOpen();\n        } else {\n          _this.props.onClose();\n        }\n\n        _this.pendingOpenValue = open;\n\n        _this.forceUpdate();\n      }\n    })), onChange(_this.nextIsOpen, cond(neq(_this.nextIsOpen, UNSET), [cond(clockRunning(_this.clock), stopClock(_this.clock)), set(_this.isOpen, _this.nextIsOpen), set(_this.gestureX, 0), set(_this.nextIsOpen, UNSET)])), onChange(_this.isSwiping, call([_this.isSwiping], function (_ref5) {\n      var _ref6 = _slicedToArray(_ref5, 1),\n          value = _ref6[0];\n\n      var keyboardDismissMode = _this.props.keyboardDismissMode;\n\n      if (value === TRUE) {\n        if (keyboardDismissMode === 'on-drag') {\n          Keyboard.dismiss();\n        }\n\n        _this.toggleStatusBar(true);\n      } else {\n        _this.toggleStatusBar(_this.currentOpenValue);\n      }\n    })), onChange(_this.gestureState, cond(eq(_this.gestureState, GestureState.ACTIVE), call([], _this.handleStartInteraction))), cond(eq(_this.gestureState, GestureState.ACTIVE), [cond(_this.isSwiping, NOOP, [set(_this.isSwiping, TRUE), set(_this.offsetX, _this.position)]), set(_this.position, add(_this.offsetX, _this.gestureX, _this.touchDistanceFromDrawer)), stopClock(_this.clock)], [set(_this.isSwiping, FALSE), set(_this.touchX, 0), _this.transitionTo(cond(_this.manuallyTriggerSpring, _this.isOpen, cond(or(and(greaterThan(abs(_this.gestureX), SWIPE_DISTANCE_MINIMUM), greaterThan(abs(_this.velocityX), _this.swipeVelocityThreshold)), greaterThan(abs(_this.gestureX), _this.swipeDistanceThreshold)), cond(eq(_this.drawerPosition, DIRECTION_LEFT), greaterThan(cond(eq(_this.velocityX, 0), _this.gestureX, _this.velocityX), 0), lessThan(cond(eq(_this.velocityX, 0), _this.gestureX, _this.velocityX), 0)), _this.isOpen)))]), _this.position]));\n\n    _defineProperty(_assertThisInitialized(_this), \"translateX\", cond(eq(_this.drawerPosition, DIRECTION_RIGHT), min(max(multiply(_this.drawerWidth, -1), _this.dragX), 0), max(min(_this.drawerWidth, _this.dragX), 0)));\n\n    _defineProperty(_assertThisInitialized(_this), \"progress\", cond(eq(_this.drawerWidth, 0), 0, abs(divide(_this.translateX, _this.drawerWidth))));\n\n    _defineProperty(_assertThisInitialized(_this), \"handleGestureEvent\", event([{\n      nativeEvent: {\n        x: _this.touchX,\n        translationX: _this.gestureX,\n        velocityX: _this.velocityX\n      }\n    }]));\n\n    _defineProperty(_assertThisInitialized(_this), \"handleGestureStateChange\", event([{\n      nativeEvent: {\n        state: function state(s) {\n          return set(_this.gestureState, s);\n        }\n      }\n    }]));\n\n    _defineProperty(_assertThisInitialized(_this), \"handleTapStateChange\", event([{\n      nativeEvent: {\n        oldState: function oldState(s) {\n          return cond(eq(s, GestureState.ACTIVE), set(_this.manuallyTriggerSpring, TRUE));\n        }\n      }\n    }]));\n\n    _defineProperty(_assertThisInitialized(_this), \"handleContainerLayout\", function (e) {\n      return _this.containerWidth.setValue(e.nativeEvent.layout.width);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleDrawerLayout\", function (e) {\n      _this.drawerWidth.setValue(e.nativeEvent.layout.width);\n\n      _this.toggleDrawer(_this.props.open);\n\n      requestAnimationFrame(function () {\n        return requestAnimationFrame(function () {\n          return _this.drawerOpacity.setValue(1);\n        });\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"toggleDrawer\", function (open) {\n      if (_this.currentOpenValue !== open) {\n        _this.nextIsOpen.setValue(open ? TRUE : FALSE);\n\n        _this.currentOpenValue = open;\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"toggleStatusBar\", function (hidden) {\n      var _this$props3 = _this.props,\n          hideStatusBar = _this$props3.hideStatusBar,\n          statusBarAnimation = _this$props3.statusBarAnimation;\n\n      if (hideStatusBar && _this.isStatusBarHidden !== hidden) {\n        _this.isStatusBarHidden = hidden;\n        StatusBar.setHidden(hidden, statusBarAnimation);\n      }\n    });\n\n    return _this;\n  }\n\n  _createClass(DrawerView, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (Platform.OS === 'web') {\n        var _document, _document$body, _document$body$addEve;\n\n        (_document = document) === null || _document === void 0 ? void 0 : (_document$body = _document.body) === null || _document$body === void 0 ? void 0 : (_document$body$addEve = _document$body.addEventListener) === null || _document$body$addEve === void 0 ? void 0 : _document$body$addEve.call(_document$body, 'keyup', this.handleEscape);\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _this$props4 = this.props,\n          open = _this$props4.open,\n          drawerPosition = _this$props4.drawerPosition,\n          drawerType = _this$props4.drawerType,\n          swipeDistanceThreshold = _this$props4.swipeDistanceThreshold,\n          swipeVelocityThreshold = _this$props4.swipeVelocityThreshold,\n          hideStatusBar = _this$props4.hideStatusBar;\n\n      if (typeof this.pendingOpenValue !== 'boolean' || open !== this.pendingOpenValue) {\n        this.toggleDrawer(open);\n      }\n\n      this.pendingOpenValue = undefined;\n\n      if (open !== prevProps.open && hideStatusBar) {\n        this.toggleStatusBar(open);\n      }\n\n      if (prevProps.drawerPosition !== drawerPosition) {\n        this.drawerPosition.setValue(drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT);\n      }\n\n      if (prevProps.drawerType !== drawerType) {\n        this.isDrawerTypeFront.setValue(drawerType === 'front' ? TRUE : FALSE);\n      }\n\n      if (prevProps.swipeDistanceThreshold !== swipeDistanceThreshold) {\n        this.swipeDistanceThreshold.setValue(swipeDistanceThreshold !== undefined ? swipeDistanceThreshold : SWIPE_DISTANCE_THRESHOLD_DEFAULT);\n      }\n\n      if (prevProps.swipeVelocityThreshold !== swipeVelocityThreshold) {\n        this.swipeVelocityThreshold.setValue(swipeVelocityThreshold);\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.toggleStatusBar(false);\n      this.handleEndInteraction();\n\n      if (Platform.OS === 'web') {\n        var _document2, _document2$body, _document2$body$remov;\n\n        (_document2 = document) === null || _document2 === void 0 ? void 0 : (_document2$body = _document2.body) === null || _document2$body === void 0 ? void 0 : (_document2$body$remov = _document2$body.removeEventListener) === null || _document2$body$remov === void 0 ? void 0 : _document2$body$remov.call(_document2$body, 'keyup', this.handleEscape);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props5 = this.props,\n          open = _this$props5.open,\n          gestureEnabled = _this$props5.gestureEnabled,\n          swipeEnabled = _this$props5.swipeEnabled,\n          drawerPosition = _this$props5.drawerPosition,\n          drawerType = _this$props5.drawerType,\n          swipeEdgeWidth = _this$props5.swipeEdgeWidth,\n          sceneContainerStyle = _this$props5.sceneContainerStyle,\n          drawerStyle = _this$props5.drawerStyle,\n          overlayStyle = _this$props5.overlayStyle,\n          renderDrawerContent = _this$props5.renderDrawerContent,\n          renderSceneContent = _this$props5.renderSceneContent,\n          gestureHandlerProps = _this$props5.gestureHandlerProps;\n      var isOpen = drawerType === 'permanent' ? true : open;\n      var isRight = drawerPosition === 'right';\n      var contentTranslateX = drawerType === 'front' || drawerType === 'permanent' ? 0 : this.translateX;\n      var drawerTranslateX = drawerType === 'permanent' ? 0 : drawerType === 'back' ? I18nManager.isRTL ? multiply(sub(this.containerWidth, this.drawerWidth), isRight ? 1 : -1) : 0 : this.translateX;\n      var offset = drawerType === 'back' ? 0 : I18nManager.isRTL ? '100%' : multiply(this.drawerWidth, -1);\n      var hitSlop = isRight ? {\n        right: 0,\n        width: isOpen ? undefined : swipeEdgeWidth\n      } : {\n        left: 0,\n        width: isOpen ? undefined : swipeEdgeWidth\n      };\n      var progress = drawerType === 'permanent' ? ANIMATED_ONE : this.progress;\n      return React.createElement(PanGestureHandler, _extends({\n        activeOffsetX: [-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM],\n        failOffsetY: [-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM],\n        onGestureEvent: this.handleGestureEvent,\n        onHandlerStateChange: this.handleGestureStateChange,\n        hitSlop: hitSlop,\n        enabled: drawerType !== 'permanent' && gestureEnabled && swipeEnabled\n      }, gestureHandlerProps), React.createElement(Animated.View, {\n        onLayout: this.handleContainerLayout,\n        style: [styles.main, {\n          flexDirection: drawerType === 'permanent' && !isRight ? 'row-reverse' : 'row'\n        }]\n      }, React.createElement(Animated.View, {\n        style: [styles.content, {\n          transform: [{\n            translateX: contentTranslateX\n          }]\n        }, sceneContainerStyle]\n      }, React.createElement(View, {\n        accessibilityElementsHidden: isOpen && drawerType !== 'permanent',\n        importantForAccessibility: isOpen && drawerType !== 'permanent' ? 'no-hide-descendants' : 'auto',\n        style: styles.content\n      }, renderSceneContent({\n        progress: progress\n      })), drawerType === 'permanent' ? null : Platform.OS === 'web' ? React.createElement(TouchableWithoutFeedback, {\n        onPress: gestureEnabled ? function () {\n          return _this2.toggleDrawer(false);\n        } : undefined\n      }, React.createElement(Overlay, {\n        progress: progress,\n        style: overlayStyle\n      })) : React.createElement(TapGestureHandler, {\n        enabled: gestureEnabled,\n        onHandlerStateChange: this.handleTapStateChange\n      }, React.createElement(Overlay, {\n        progress: progress,\n        style: overlayStyle\n      }))), React.createElement(Animated.Code, {\n        exec: this.containerWidth\n      }), drawerType === 'permanent' ? null : React.createElement(Animated.Code, {\n        exec: block([onChange(this.manuallyTriggerSpring, [cond(eq(this.manuallyTriggerSpring, TRUE), [set(this.nextIsOpen, FALSE), call([], function () {\n          return _this2.currentOpenValue = false;\n        })])])])\n      }), React.createElement(Animated.View, {\n        accessibilityViewIsModal: isOpen && drawerType !== 'permanent',\n        removeClippedSubviews: Platform.OS !== 'ios',\n        onLayout: this.handleDrawerLayout,\n        style: [styles.container, {\n          transform: [{\n            translateX: drawerTranslateX\n          }],\n          opacity: this.drawerOpacity\n        }, drawerType === 'permanent' ? isRight ? {\n          right: 0\n        } : {\n          left: 0\n        } : [styles.nonPermanent, isRight ? {\n          right: offset\n        } : {\n          left: offset\n        }, {\n          zIndex: drawerType === 'back' ? -1 : 0\n        }], drawerStyle]\n      }, renderDrawerContent({\n        progress: progress\n      }))));\n    }\n  }]);\n\n  return DrawerView;\n}(React.Component);\n\nexport { DrawerView as default };\n\n_defineProperty(DrawerView, \"defaultProps\", {\n  drawerPosition: I18nManager.isRTL ? 'left' : 'right',\n  drawerType: 'front',\n  gestureEnabled: true,\n  swipeEnabled: Platform.OS !== 'web',\n  swipeEdgeWidth: 32,\n  swipeVelocityThreshold: 500,\n  keyboardDismissMode: 'on-drag',\n  hideStatusBar: false,\n  statusBarAnimation: 'slide'\n});\n\nvar styles = StyleSheet.create({\n  container: {\n    backgroundColor: 'white',\n    maxWidth: '100%'\n  },\n  nonPermanent: {\n    position: 'absolute',\n    top: 0,\n    bottom: 0,\n    width: '80%'\n  },\n  content: {\n    flex: 1\n  },\n  main: _objectSpread({\n    flex: 1\n  }, Platform.select({\n    web: null,\n    default: {\n      overflow: 'hidden'\n    }\n  }))\n});","map":{"version":3,"sources":["Drawer.tsx"],"names":["sub","TRUE","FALSE","NOOP","UNSET","DIRECTION_LEFT","DIRECTION_RIGHT","SWIPE_DISTANCE_THRESHOLD_DEFAULT","SWIPE_DISTANCE_MINIMUM","SPRING_CONFIG","stiffness","damping","mass","overshootClamping","restDisplacementThreshold","restSpeedThreshold","ANIMATED_ONE","Animated","DrawerView","React","drawerPosition","I18nManager","drawerType","gestureEnabled","swipeEnabled","Platform","swipeEdgeWidth","swipeVelocityThreshold","keyboardDismissMode","hideStatusBar","statusBarAnimation","open","prevProps","swipeDistanceThreshold","e","onClose","InteractionManager","dimensions","width","StyleSheet","percentage","Number","GestureState","cond","eq","max","min","multiply","isOpen","toValue","frameTime","state","position","time","finished","velocity","block","clockRunning","set","startClock","call","spring","stopClock","Boolean","onChange","neq","value","Keyboard","add","or","and","greaterThan","abs","lessThan","divide","event","nativeEvent","x","translationX","velocityX","s","oldState","requestAnimationFrame","hidden","StatusBar","gestureHandlerProps","isRight","contentTranslateX","drawerTranslateX","offset","hitSlop","right","left","progress","styles","flexDirection","transform","translateX","content","renderSceneContent","undefined","overlayStyle","handleTapStateChange","containerWidth","opacity","drawerOpacity","zIndex","renderDrawerContent","container","backgroundColor","maxWidth","nonPermanent","top","bottom","flex","main","web","default","overflow"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  StyleSheet,\n  ViewStyle,\n  LayoutChangeEvent,\n  I18nManager,\n  Platform,\n  Keyboard,\n  StatusBar,\n  StyleProp,\n  View,\n  InteractionManager,\n  TouchableWithoutFeedback,\n} from 'react-native';\nimport Animated from 'react-native-reanimated';\nimport {\n  PanGestureHandler,\n  TapGestureHandler,\n  GestureState,\n} from './GestureHandler';\nimport Overlay from './Overlay';\n\nconst {\n  Clock,\n  Value,\n  onChange,\n  clockRunning,\n  startClock,\n  stopClock,\n  spring,\n  abs,\n  add,\n  and,\n  block,\n  call,\n  cond,\n  divide,\n  eq,\n  event,\n  greaterThan,\n  lessThan,\n  max,\n  min,\n  multiply,\n  neq,\n  or,\n  set,\n  sub,\n} = Animated;\n\nconst TRUE = 1;\nconst FALSE = 0;\nconst NOOP = 0;\nconst UNSET = -1;\n\nconst DIRECTION_LEFT = 1;\nconst DIRECTION_RIGHT = -1;\n\nconst SWIPE_DISTANCE_THRESHOLD_DEFAULT = 60;\n\nconst SWIPE_DISTANCE_MINIMUM = 5;\n\nconst SPRING_CONFIG = {\n  stiffness: 1000,\n  damping: 500,\n  mass: 3,\n  overshootClamping: true,\n  restDisplacementThreshold: 0.01,\n  restSpeedThreshold: 0.01,\n};\n\nconst ANIMATED_ONE = new Animated.Value(1);\n\ntype Binary = 0 | 1;\n\ntype Renderer = (props: { progress: Animated.Node<number> }) => React.ReactNode;\n\ntype Props = {\n  open: boolean;\n  onOpen: () => void;\n  onClose: () => void;\n  gestureEnabled: boolean;\n  swipeEnabled: boolean;\n  drawerPosition: 'left' | 'right';\n  drawerType: 'front' | 'back' | 'slide' | 'permanent';\n  keyboardDismissMode: 'none' | 'on-drag';\n  swipeEdgeWidth: number;\n  swipeDistanceThreshold?: number;\n  swipeVelocityThreshold: number;\n  hideStatusBar: boolean;\n  statusBarAnimation: 'slide' | 'none' | 'fade';\n  overlayStyle?: StyleProp<ViewStyle>;\n  drawerStyle?: StyleProp<ViewStyle>;\n  sceneContainerStyle?: StyleProp<ViewStyle>;\n  renderDrawerContent: Renderer;\n  renderSceneContent: Renderer;\n  gestureHandlerProps?: React.ComponentProps<typeof PanGestureHandler>;\n  dimensions: { width: number; height: number };\n};\n\nexport default class DrawerView extends React.Component<Props> {\n  static defaultProps = {\n    drawerPosition: I18nManager.isRTL ? 'left' : 'right',\n    drawerType: 'front',\n    gestureEnabled: true,\n    swipeEnabled: Platform.OS !== 'web',\n    swipeEdgeWidth: 32,\n    swipeVelocityThreshold: 500,\n    keyboardDismissMode: 'on-drag',\n    hideStatusBar: false,\n    statusBarAnimation: 'slide',\n  };\n\n  componentDidMount() {\n    if (Platform.OS === 'web') {\n      document?.body?.addEventListener?.('keyup', this.handleEscape);\n    }\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const {\n      open,\n      drawerPosition,\n      drawerType,\n      swipeDistanceThreshold,\n      swipeVelocityThreshold,\n      hideStatusBar,\n    } = this.props;\n\n    if (\n      // If we're not in the middle of a transition, sync the drawer's open state\n      typeof this.pendingOpenValue !== 'boolean' ||\n      open !== this.pendingOpenValue\n    ) {\n      this.toggleDrawer(open);\n    }\n\n    this.pendingOpenValue = undefined;\n\n    if (open !== prevProps.open && hideStatusBar) {\n      this.toggleStatusBar(open);\n    }\n\n    if (prevProps.drawerPosition !== drawerPosition) {\n      this.drawerPosition.setValue(\n        drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT\n      );\n    }\n\n    if (prevProps.drawerType !== drawerType) {\n      this.isDrawerTypeFront.setValue(drawerType === 'front' ? TRUE : FALSE);\n    }\n\n    if (prevProps.swipeDistanceThreshold !== swipeDistanceThreshold) {\n      this.swipeDistanceThreshold.setValue(\n        swipeDistanceThreshold !== undefined\n          ? swipeDistanceThreshold\n          : SWIPE_DISTANCE_THRESHOLD_DEFAULT\n      );\n    }\n\n    if (prevProps.swipeVelocityThreshold !== swipeVelocityThreshold) {\n      this.swipeVelocityThreshold.setValue(swipeVelocityThreshold);\n    }\n  }\n\n  componentWillUnmount() {\n    this.toggleStatusBar(false);\n    this.handleEndInteraction();\n\n    if (Platform.OS === 'web') {\n      document?.body?.removeEventListener?.('keyup', this.handleEscape);\n    }\n  }\n\n  private handleEscape = (e: KeyboardEvent) => {\n    const { open, onClose } = this.props;\n\n    if (e.key === 'Escape') {\n      if (open) {\n        onClose();\n      }\n    }\n  };\n\n  private handleEndInteraction = () => {\n    if (this.interactionHandle !== undefined) {\n      InteractionManager.clearInteractionHandle(this.interactionHandle);\n      this.interactionHandle = undefined;\n    }\n  };\n\n  private handleStartInteraction = () => {\n    if (this.interactionHandle === undefined) {\n      this.interactionHandle = InteractionManager.createInteractionHandle();\n    }\n  };\n\n  private getDrawerWidth = (): number => {\n    const { drawerStyle, dimensions } = this.props;\n    const { width } = StyleSheet.flatten(drawerStyle);\n\n    if (typeof width === 'string' && width.endsWith('%')) {\n      // Try to calculate width if a percentage is given\n      const percentage = Number(width.replace(/%$/, ''));\n\n      if (Number.isFinite(percentage)) {\n        return dimensions.width * (percentage / 100);\n      }\n    }\n\n    return typeof width === 'number' ? width : 0;\n  };\n\n  private clock = new Clock();\n  private interactionHandle: number | undefined;\n\n  private isDrawerTypeFront = new Value<Binary>(\n    this.props.drawerType === 'front' ? TRUE : FALSE\n  );\n\n  private isOpen = new Value<Binary>(this.props.open ? TRUE : FALSE);\n  private nextIsOpen = new Value<Binary | -1>(UNSET);\n  private isSwiping = new Value<Binary>(FALSE);\n\n  private initialDrawerWidth = this.getDrawerWidth();\n\n  private gestureState = new Value<number>(GestureState.UNDETERMINED);\n  private touchX = new Value<number>(0);\n  private velocityX = new Value<number>(0);\n  private gestureX = new Value<number>(0);\n  private offsetX = new Value<number>(0);\n  private position = new Value<number>(\n    this.props.open\n      ? this.initialDrawerWidth *\n        (this.props.drawerPosition === 'right'\n          ? DIRECTION_RIGHT\n          : DIRECTION_LEFT)\n      : 0\n  );\n\n  private containerWidth = new Value<number>(this.props.dimensions.width);\n  private drawerWidth = new Value<number>(this.initialDrawerWidth);\n  private drawerOpacity = new Value<number>(\n    this.initialDrawerWidth || this.props.drawerType === 'permanent' ? 1 : 0\n  );\n  private drawerPosition = new Value<number>(\n    this.props.drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT\n  );\n\n  // Comment stolen from react-native-gesture-handler/DrawerLayout\n  //\n  // While closing the drawer when user starts gesture outside of its area (in greyed\n  // out part of the window), we want the drawer to follow only once finger reaches the\n  // edge of the drawer.\n  // E.g. on the diagram below drawer is illustrate by X signs and the greyed out area by\n  // dots. The touch gesture starts at '*' and moves left, touch path is indicated by\n  // an arrow pointing left\n  // 1) +---------------+ 2) +---------------+ 3) +---------------+ 4) +---------------+\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|.<-*..|    |XXXXXXXX|<--*..|    |XXXXX|<-----*..|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    +---------------+    +---------------+    +---------------+    +---------------+\n  //\n  // For the above to work properly we define animated value that will keep start position\n  // of the gesture. Then we use that value to calculate how much we need to subtract from\n  // the dragX. If the gesture started on the greyed out area we take the distance from the\n  // edge of the drawer to the start position. Otherwise we don't subtract at all and the\n  // drawer be pulled back as soon as you start the pan.\n  //\n  // This is used only when drawerType is \"front\"\n  private touchDistanceFromDrawer = cond(\n    this.isDrawerTypeFront,\n    cond(\n      eq(this.drawerPosition, DIRECTION_LEFT),\n      max(\n        // Distance of touch start from left screen edge - Drawer width\n        sub(sub(this.touchX, this.gestureX), this.drawerWidth),\n        0\n      ),\n      min(\n        multiply(\n          // Distance of drawer from left screen edge - Touch start point\n          sub(\n            sub(this.containerWidth, this.drawerWidth),\n            sub(this.touchX, this.gestureX)\n          ),\n          DIRECTION_RIGHT\n        ),\n        0\n      )\n    ),\n    0\n  );\n\n  private swipeDistanceThreshold = new Value<number>(\n    this.props.swipeDistanceThreshold !== undefined\n      ? this.props.swipeDistanceThreshold\n      : SWIPE_DISTANCE_THRESHOLD_DEFAULT\n  );\n  private swipeVelocityThreshold = new Value<number>(\n    this.props.swipeVelocityThreshold\n  );\n\n  private currentOpenValue: boolean = this.props.open;\n  private pendingOpenValue: boolean | undefined;\n\n  private isStatusBarHidden: boolean = false;\n\n  private manuallyTriggerSpring = new Value<Binary>(FALSE);\n\n  private transitionTo = (isOpen: number | Animated.Node<number>) => {\n    const toValue = new Value(0);\n    const frameTime = new Value(0);\n\n    const state = {\n      position: this.position,\n      time: new Value(0),\n      finished: new Value(FALSE),\n      velocity: new Value(0),\n    };\n\n    return block([\n      cond(clockRunning(this.clock), NOOP, [\n        // Animation wasn't running before\n        // Set the initial values and start the clock\n        set(toValue, multiply(isOpen, this.drawerWidth, this.drawerPosition)),\n        set(frameTime, 0),\n        set(state.time, 0),\n        set(state.finished, FALSE),\n        set(state.velocity, this.velocityX),\n        set(this.isOpen, isOpen),\n        startClock(this.clock),\n        call([], this.handleStartInteraction),\n        set(this.manuallyTriggerSpring, FALSE),\n      ]),\n      spring(this.clock, state, { ...SPRING_CONFIG, toValue }),\n      cond(state.finished, [\n        // Reset gesture and velocity from previous gesture\n        set(this.touchX, 0),\n        set(this.gestureX, 0),\n        set(this.velocityX, 0),\n        set(this.offsetX, 0),\n        // When the animation finishes, stop the clock\n        stopClock(this.clock),\n        call([this.isOpen], ([value]: readonly Binary[]) => {\n          const open = Boolean(value);\n          this.handleEndInteraction();\n\n          if (open !== this.props.open) {\n            // Sync drawer's state after animation finished\n            // This shouldn't be necessary, but there seems to be an issue on iOS\n            this.toggleDrawer(this.props.open);\n          }\n        }),\n      ]),\n    ]);\n  };\n\n  private dragX = block([\n    onChange(\n      this.isOpen,\n      call([this.isOpen], ([value]: readonly Binary[]) => {\n        const open = Boolean(value);\n\n        this.currentOpenValue = open;\n\n        // Without this check, the drawer can go to an infinite update <-> animate loop for sync updates\n        if (open !== this.props.open) {\n          // If the mode changed, update state\n          if (open) {\n            this.props.onOpen();\n          } else {\n            this.props.onClose();\n          }\n\n          this.pendingOpenValue = open;\n\n          // Force componentDidUpdate to fire, whether user does a setState or not\n          // This allows us to detect when the user drops the update and revert back\n          // It's necessary to make sure that the state stays in sync\n          this.forceUpdate();\n        }\n      })\n    ),\n    onChange(\n      this.nextIsOpen,\n      cond(neq(this.nextIsOpen, UNSET), [\n        // Stop any running animations\n        cond(clockRunning(this.clock), stopClock(this.clock)),\n        // Update the open value to trigger the transition\n        set(this.isOpen, this.nextIsOpen),\n        set(this.gestureX, 0),\n        set(this.nextIsOpen, UNSET),\n      ])\n    ),\n    // This block must be after the this.isOpen listener since we check for current value\n    onChange(\n      this.isSwiping,\n      // Listen to updates for this value only when it changes\n      // Without `onChange`, this will fire even if the value didn't change\n      // We don't want to call the listeners if the value didn't change\n      call([this.isSwiping], ([value]: readonly Binary[]) => {\n        const { keyboardDismissMode } = this.props;\n\n        if (value === TRUE) {\n          if (keyboardDismissMode === 'on-drag') {\n            Keyboard.dismiss();\n          }\n\n          this.toggleStatusBar(true);\n        } else {\n          this.toggleStatusBar(this.currentOpenValue);\n        }\n      })\n    ),\n    onChange(\n      this.gestureState,\n      cond(\n        eq(this.gestureState, GestureState.ACTIVE),\n        call([], this.handleStartInteraction)\n      )\n    ),\n    cond(\n      eq(this.gestureState, GestureState.ACTIVE),\n      [\n        cond(this.isSwiping, NOOP, [\n          // We weren't dragging before, set it to true\n          set(this.isSwiping, TRUE),\n          // Also update the drag offset to the last position\n          set(this.offsetX, this.position),\n        ]),\n        // Update position with previous offset + gesture distance\n        set(\n          this.position,\n          add(this.offsetX, this.gestureX, this.touchDistanceFromDrawer)\n        ),\n        // Stop animations while we're dragging\n        stopClock(this.clock),\n      ],\n      [\n        set(this.isSwiping, FALSE),\n        set(this.touchX, 0),\n        this.transitionTo(\n          cond(\n            this.manuallyTriggerSpring,\n            this.isOpen,\n            cond(\n              or(\n                and(\n                  greaterThan(abs(this.gestureX), SWIPE_DISTANCE_MINIMUM),\n                  greaterThan(abs(this.velocityX), this.swipeVelocityThreshold)\n                ),\n                greaterThan(abs(this.gestureX), this.swipeDistanceThreshold)\n              ),\n              cond(\n                eq(this.drawerPosition, DIRECTION_LEFT),\n                // If swiped to right, open the drawer, otherwise close it\n                greaterThan(\n                  cond(eq(this.velocityX, 0), this.gestureX, this.velocityX),\n                  0\n                ),\n                // If swiped to left, open the drawer, otherwise close it\n                lessThan(\n                  cond(eq(this.velocityX, 0), this.gestureX, this.velocityX),\n                  0\n                )\n              ),\n              this.isOpen\n            )\n          )\n        ),\n      ]\n    ),\n    this.position,\n  ]);\n\n  private translateX = cond(\n    eq(this.drawerPosition, DIRECTION_RIGHT),\n    min(max(multiply(this.drawerWidth, -1), this.dragX), 0),\n    max(min(this.drawerWidth, this.dragX), 0)\n  );\n\n  private progress = cond(\n    // Check if the drawer width is available to avoid division by zero\n    eq(this.drawerWidth, 0),\n    0,\n    abs(divide(this.translateX, this.drawerWidth))\n  );\n\n  private handleGestureEvent = event([\n    {\n      nativeEvent: {\n        x: this.touchX,\n        translationX: this.gestureX,\n        velocityX: this.velocityX,\n      },\n    },\n  ]);\n\n  private handleGestureStateChange = event([\n    {\n      nativeEvent: {\n        state: (s: Animated.Value<number>) => set(this.gestureState, s),\n      },\n    },\n  ]);\n\n  private handleTapStateChange = event([\n    {\n      nativeEvent: {\n        oldState: (s: Animated.Value<number>) =>\n          cond(\n            eq(s, GestureState.ACTIVE),\n            set(this.manuallyTriggerSpring, TRUE)\n          ),\n      },\n    },\n  ]);\n\n  private handleContainerLayout = (e: LayoutChangeEvent) =>\n    this.containerWidth.setValue(e.nativeEvent.layout.width);\n\n  private handleDrawerLayout = (e: LayoutChangeEvent) => {\n    this.drawerWidth.setValue(e.nativeEvent.layout.width);\n    this.toggleDrawer(this.props.open);\n\n    // Until layout is available, drawer is hidden with opacity: 0 by default\n    // Show it in the next frame when layout is available\n    // If we don't delay it until the next frame, there's a visible flicker\n    requestAnimationFrame(() =>\n      requestAnimationFrame(() => this.drawerOpacity.setValue(1))\n    );\n  };\n\n  private toggleDrawer = (open: boolean) => {\n    if (this.currentOpenValue !== open) {\n      this.nextIsOpen.setValue(open ? TRUE : FALSE);\n\n      // This value will also be set shortly after as changing this.nextIsOpen changes this.isOpen\n      // However, there's a race condition on Android, so we need to set a bit earlier\n      this.currentOpenValue = open;\n    }\n  };\n\n  private toggleStatusBar = (hidden: boolean) => {\n    const { hideStatusBar, statusBarAnimation } = this.props;\n\n    if (hideStatusBar && this.isStatusBarHidden !== hidden) {\n      this.isStatusBarHidden = hidden;\n      StatusBar.setHidden(hidden, statusBarAnimation);\n    }\n  };\n\n  render() {\n    const {\n      open,\n      gestureEnabled,\n      swipeEnabled,\n      drawerPosition,\n      drawerType,\n      swipeEdgeWidth,\n      sceneContainerStyle,\n      drawerStyle,\n      overlayStyle,\n      renderDrawerContent,\n      renderSceneContent,\n      gestureHandlerProps,\n    } = this.props;\n\n    const isOpen = drawerType === 'permanent' ? true : open;\n    const isRight = drawerPosition === 'right';\n\n    const contentTranslateX =\n      drawerType === 'front' || drawerType === 'permanent'\n        ? 0\n        : this.translateX;\n\n    const drawerTranslateX =\n      drawerType === 'permanent'\n        ? 0\n        : drawerType === 'back'\n        ? I18nManager.isRTL\n          ? multiply(\n              sub(this.containerWidth, this.drawerWidth),\n              isRight ? 1 : -1\n            )\n          : 0\n        : this.translateX;\n\n    const offset =\n      drawerType === 'back'\n        ? 0\n        : I18nManager.isRTL\n        ? '100%'\n        : multiply(this.drawerWidth, -1);\n\n    // FIXME: Currently hitSlop is broken when on Android when drawer is on right\n    // https://github.com/kmagiera/react-native-gesture-handler/issues/569\n    const hitSlop = isRight\n      ? // Extend hitSlop to the side of the screen when drawer is closed\n        // This lets the user drag the drawer from the side of the screen\n        { right: 0, width: isOpen ? undefined : swipeEdgeWidth }\n      : { left: 0, width: isOpen ? undefined : swipeEdgeWidth };\n\n    const progress = drawerType === 'permanent' ? ANIMATED_ONE : this.progress;\n\n    return (\n      <PanGestureHandler\n        activeOffsetX={[-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM]}\n        failOffsetY={[-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM]}\n        onGestureEvent={this.handleGestureEvent}\n        onHandlerStateChange={this.handleGestureStateChange}\n        hitSlop={hitSlop}\n        enabled={drawerType !== 'permanent' && gestureEnabled && swipeEnabled}\n        {...gestureHandlerProps}\n      >\n        <Animated.View\n          onLayout={this.handleContainerLayout}\n          style={[\n            styles.main,\n            {\n              flexDirection:\n                drawerType === 'permanent' && !isRight ? 'row-reverse' : 'row',\n            },\n          ]}\n        >\n          <Animated.View\n            style={[\n              styles.content,\n              { transform: [{ translateX: contentTranslateX }] },\n              sceneContainerStyle as any,\n            ]}\n          >\n            <View\n              accessibilityElementsHidden={isOpen && drawerType !== 'permanent'}\n              importantForAccessibility={\n                isOpen && drawerType !== 'permanent'\n                  ? 'no-hide-descendants'\n                  : 'auto'\n              }\n              style={styles.content}\n            >\n              {renderSceneContent({ progress })}\n            </View>\n            {\n              // Disable overlay if sidebar is permanent\n              drawerType === 'permanent' ? null : Platform.OS === 'web' ? (\n                <TouchableWithoutFeedback\n                  onPress={\n                    gestureEnabled ? () => this.toggleDrawer(false) : undefined\n                  }\n                >\n                  <Overlay progress={progress} style={overlayStyle as any} />\n                </TouchableWithoutFeedback>\n              ) : (\n                <TapGestureHandler\n                  enabled={gestureEnabled}\n                  onHandlerStateChange={this.handleTapStateChange}\n                >\n                  <Overlay progress={progress} style={overlayStyle as any} />\n                </TapGestureHandler>\n              )\n            }\n          </Animated.View>\n          <Animated.Code\n            // This is needed to make sure that container width updates with `setValue`\n            // Without this, it won't update when not used in styles\n            exec={this.containerWidth}\n          />\n          {drawerType === 'permanent' ? null : (\n            <Animated.Code\n              exec={block([\n                onChange(this.manuallyTriggerSpring, [\n                  cond(eq(this.manuallyTriggerSpring, TRUE), [\n                    set(this.nextIsOpen, FALSE),\n                    call([], () => (this.currentOpenValue = false)),\n                  ]),\n                ]),\n              ])}\n            />\n          )}\n          <Animated.View\n            accessibilityViewIsModal={isOpen && drawerType !== 'permanent'}\n            removeClippedSubviews={Platform.OS !== 'ios'}\n            onLayout={this.handleDrawerLayout}\n            style={[\n              styles.container,\n              {\n                transform: [{ translateX: drawerTranslateX }],\n                opacity: this.drawerOpacity,\n              },\n              drawerType === 'permanent'\n                ? // Without this, the `left`/`right` values don't get reset\n                  isRight\n                  ? { right: 0 }\n                  : { left: 0 }\n                : [\n                    styles.nonPermanent,\n                    isRight ? { right: offset } : { left: offset },\n                    { zIndex: drawerType === 'back' ? -1 : 0 },\n                  ],\n              drawerStyle as any,\n            ]}\n          >\n            {renderDrawerContent({ progress })}\n          </Animated.View>\n        </Animated.View>\n      </PanGestureHandler>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: 'white',\n    maxWidth: '100%',\n  },\n  nonPermanent: {\n    position: 'absolute',\n    top: 0,\n    bottom: 0,\n    width: '80%',\n  },\n  content: {\n    flex: 1,\n  },\n  main: {\n    flex: 1,\n    ...Platform.select({\n      // FIXME: We need to hide `overflowX` on Web so the translated content doesn't show offscreen.\n      // But adding `overflowX: 'hidden'` prevents content from collapsing the URL bar.\n      web: null,\n      default: { overflow: 'hidden' },\n    }),\n  },\n});\n"]},"metadata":{},"sourceType":"module"}