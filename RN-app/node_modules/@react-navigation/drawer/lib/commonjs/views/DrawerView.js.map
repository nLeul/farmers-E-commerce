{"version":3,"sources":["DrawerView.tsx"],"names":["getDefaultDrawerWidth","height","width","smallerAxisSize","Math","min","isLandscape","isTablet","appBarHeight","Platform","OS","maxWidth","GestureHandlerWrapper","GestureHandlerRootView","View","DrawerView","state","navigation","descriptors","lazy","drawerContent","props","drawerPosition","I18nManager","isRTL","keyboardDismissMode","overlayColor","drawerType","hideStatusBar","statusBarAnimation","drawerContentOptions","drawerStyle","edgeWidth","gestureHandlerProps","minSwipeDistance","sceneContainerStyle","loaded","setLoaded","React","useState","index","dimensions","colors","isDrawerOpen","history","some","it","type","handleDrawerOpen","useCallback","dispatch","DrawerActions","openDrawer","target","key","handleDrawerClose","closeDrawer","useEffect","emit","subscription","BackHandler","addEventListener","remove","includes","renderNavigationView","progress","renderContent","styles","content","routes","map","route","descriptor","unmountOnBlur","options","isFocused","StyleSheet","absoluteFill","opacity","render","activeKey","gestureEnabled","swipeEnabled","backgroundColor","background","card","borderRightColor","border","borderRightWidth","hairlineWidth","borderLeftColor","borderLeftWidth","create","flex"],"mappings":";;;;;;;AAAA;;AACA;;AASA;;AACA;;AAOA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;AAcA,MAAMA,qBAAqB,GAAG,CAAC;AAC7BC,EAAAA,MAD6B;AAE7BC,EAAAA;AAF6B,CAAD,KAMxB;AACJ;;;;;AAKA,QAAMC,eAAe,GAAGC,IAAI,CAACC,GAAL,CAASJ,MAAT,EAAiBC,KAAjB,CAAxB;AACA,QAAMI,WAAW,GAAGJ,KAAK,GAAGD,MAA5B;AACA,QAAMM,QAAQ,GAAGJ,eAAe,IAAI,GAApC;AACA,QAAMK,YAAY,GAAGC,sBAASC,EAAT,KAAgB,KAAhB,GAAyBJ,WAAW,GAAG,EAAH,GAAQ,EAA5C,GAAkD,EAAvE;AACA,QAAMK,QAAQ,GAAGJ,QAAQ,GAAG,GAAH,GAAS,GAAlC;AAEA,SAAOH,IAAI,CAACC,GAAL,CAASF,eAAe,GAAGK,YAA3B,EAAyCG,QAAzC,CAAP;AACD,CAnBD;;AAqBA,MAAMC,qBAAqB,GAAGC,sCAAH,aAAGA,sCAAH,cAAGA,sCAAH,GAA6BC,iBAAxD;AAEA;;;;AAGe,SAASC,UAAT,CAAoB;AACjCC,EAAAA,KADiC;AAEjCC,EAAAA,UAFiC;AAGjCC,EAAAA,WAHiC;AAIjCC,EAAAA,IAAI,GAAG,IAJ0B;AAKjCC,EAAAA,aAAa,GAAIC,KAAD,iBACd,oBAAC,sBAAD,EAAmBA,KAAnB,CAN+B;AAQjCC,EAAAA,cAAc,GAAGC,yBAAYC,KAAZ,GAAoB,OAApB,GAA8B,MARd;AASjCC,EAAAA,mBAAmB,GAAG,SATW;AAUjCC,EAAAA,YAAY,GAAG,oBAVkB;AAWjCC,EAAAA,UAAU,GAAG,OAXoB;AAYjCC,EAAAA,aAAa,GAAG,KAZiB;AAajCC,EAAAA,kBAAkB,GAAG,OAbY;AAcjCC,EAAAA,oBAdiC;AAejCC,EAAAA,WAfiC;AAgBjCC,EAAAA,SAhBiC;AAiBjCC,EAAAA,mBAjBiC;AAkBjCC,EAAAA,gBAlBiC;AAmBjCC,EAAAA;AAnBiC,CAApB,EAoBL;AACR,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBC,KAAK,CAACC,QAAN,CAAe,CAACvB,KAAK,CAACwB,KAAP,CAAf,CAA5B;AACA,QAAMC,UAAU,GAAG,mCAAnB;AAEA,QAAM;AAAEC,IAAAA;AAAF,MAAa,uBAAnB;AAEA,QAAMC,YAAY,GAAG3B,KAAK,CAAC4B,OAAN,CAAcC,IAAd,CAAoBC,EAAD,IAAQA,EAAE,CAACC,IAAH,KAAY,QAAvC,CAArB;AAEA,QAAMC,gBAAgB,GAAGV,KAAK,CAACW,WAAN,CAAkB,MAAM;AAC/ChC,IAAAA,UAAU,CAACiC,QAAX,iCACKC,sBAAcC,UAAd,EADL;AAEEC,MAAAA,MAAM,EAAErC,KAAK,CAACsC;AAFhB;AAID,GALwB,EAKtB,CAACrC,UAAD,EAAaD,KAAK,CAACsC,GAAnB,CALsB,CAAzB;AAOA,QAAMC,iBAAiB,GAAGjB,KAAK,CAACW,WAAN,CAAkB,MAAM;AAChDhC,IAAAA,UAAU,CAACiC,QAAX,iCACKC,sBAAcK,WAAd,EADL;AAEEH,MAAAA,MAAM,EAAErC,KAAK,CAACsC;AAFhB;AAID,GALyB,EAKvB,CAACrC,UAAD,EAAaD,KAAK,CAACsC,GAAnB,CALuB,CAA1B;AAOAhB,EAAAA,KAAK,CAACmB,SAAN,CAAgB,MAAM;AACpB,QAAId,YAAJ,EAAkB;AAChB1B,MAAAA,UAAU,CAACyC,IAAX,CAAgB;AAAEX,QAAAA,IAAI,EAAE;AAAR,OAAhB;AACD,KAFD,MAEO;AACL9B,MAAAA,UAAU,CAACyC,IAAX,CAAgB;AAAEX,QAAAA,IAAI,EAAE;AAAR,OAAhB;AACD;AACF,GAND,EAMG,CAACJ,YAAD,EAAe1B,UAAf,CANH;AAQAqB,EAAAA,KAAK,CAACmB,SAAN,CAAgB,MAAM;AACpB,QAAIE,YAAJ;;AAEA,QAAIhB,YAAJ,EAAkB;AAChB;AACA;AACA;AACAgB,MAAAA,YAAY,GAAGC,yBAAYC,gBAAZ,CAA6B,mBAA7B,EAAkD,MAAM;AACrEN,QAAAA,iBAAiB;AAEjB,eAAO,IAAP;AACD,OAJc,CAAf;AAKD;;AAED,WAAO;AAAA;;AAAA,8BAAMI,YAAN,kDAAM,cAAcG,MAAd,EAAN;AAAA,KAAP;AACD,GAfD,EAeG,CAACP,iBAAD,EAAoBZ,YAApB,EAAkC1B,UAAlC,EAA8CD,KAAK,CAACsC,GAApD,CAfH;;AAiBA,MAAI,CAAClB,MAAM,CAAC2B,QAAP,CAAgB/C,KAAK,CAACwB,KAAtB,CAAL,EAAmC;AACjCH,IAAAA,SAAS,CAAC,CAAC,GAAGD,MAAJ,EAAYpB,KAAK,CAACwB,KAAlB,CAAD,CAAT;AACD;;AAED,QAAMwB,oBAAoB,GAAG,CAAC;AAAEC,IAAAA;AAAF,GAAD,KAAuB;AAClD,wBACE,oBAAC,8BAAD,CAAuB,QAAvB;AAAgC,MAAA,KAAK,EAAE3C;AAAvC,OACGF,aAAa,iCACTU,oBADS;AAEZmC,MAAAA,QAAQ,EAAEA,QAFE;AAGZjD,MAAAA,KAAK,EAAEA,KAHK;AAIZC,MAAAA,UAAU,EAAEA,UAJA;AAKZC,MAAAA,WAAW,EAAEA;AALD,OADhB,CADF;AAWD,GAZD;;AAcA,QAAMgD,aAAa,GAAG,MAAM;AAC1B,wBACE,oBAAC,mCAAD;AAAiB,MAAA,KAAK,EAAEC,MAAM,CAACC;AAA/B,OACGpD,KAAK,CAACqD,MAAN,CAAaC,GAAb,CAAiB,CAACC,KAAD,EAAQ/B,KAAR,KAAkB;AAClC,YAAMgC,UAAU,GAAGtD,WAAW,CAACqD,KAAK,CAACjB,GAAP,CAA9B;AACA,YAAM;AAAEmB,QAAAA;AAAF,UAAoBD,UAAU,CAACE,OAArC;AACA,YAAMC,SAAS,GAAG3D,KAAK,CAACwB,KAAN,KAAgBA,KAAlC;;AAEA,UAAIiC,aAAa,IAAI,CAACE,SAAtB,EAAiC;AAC/B,eAAO,IAAP;AACD;;AAED,UAAIxD,IAAI,IAAI,CAACiB,MAAM,CAAC2B,QAAP,CAAgBvB,KAAhB,CAAT,IAAmC,CAACmC,SAAxC,EAAmD;AACjD;AACA,eAAO,IAAP;AACD;;AAED,0BACE,oBAAC,4BAAD;AACE,QAAA,GAAG,EAAEJ,KAAK,CAACjB,GADb;AAEE,QAAA,KAAK,EAAE,CAACsB,wBAAWC,YAAZ,EAA0B;AAAEC,UAAAA,OAAO,EAAEH,SAAS,GAAG,CAAH,GAAO;AAA3B,SAA1B,CAFT;AAGE,QAAA,SAAS,EAAEA;AAHb,SAKGH,UAAU,CAACO,MAAX,EALH,CADF;AASD,KAvBA,CADH,CADF;AA4BD,GA7BD;;AA+BA,QAAMC,SAAS,GAAGhE,KAAK,CAACqD,MAAN,CAAarD,KAAK,CAACwB,KAAnB,EAA0Bc,GAA5C;AACA,QAAM;AAAE2B,IAAAA,cAAF;AAAkBC,IAAAA;AAAlB,MAAmChE,WAAW,CAAC8D,SAAD,CAAX,CAAuBN,OAAhE;AAEA,sBACE,oBAAC,gCAAD,CAA0B,QAA1B;AAAmC,IAAA,KAAK,EAAEzD;AAA1C,kBACE,oBAAC,qBAAD;AAAuB,IAAA,KAAK,EAAEkD,MAAM,CAACC;AAArC,kBACE,oBAAC,+BAAD,qBACE,oBAAC,0BAAD,CAAmB,QAAnB;AAA4B,IAAA,KAAK,EAAEzB;AAAnC,kBACE,oBAAC,eAAD;AACE,IAAA,IAAI,EAAEA,YADR;AAEE,IAAA,cAAc,EAAEsC,cAFlB;AAGE,IAAA,YAAY,EAAEC,YAHhB;AAIE,IAAA,MAAM,EAAElC,gBAJV;AAKE,IAAA,OAAO,EAAEO,iBALX;AAME,IAAA,mBAAmB,EAAEtB,mBANvB;AAOE,IAAA,UAAU,EAAEN,UAPd;AAQE,IAAA,cAAc,EAAEL,cARlB;AASE,IAAA,mBAAmB,EAAE,CACnB;AAAE6D,MAAAA,eAAe,EAAEzC,MAAM,CAAC0C;AAA1B,KADmB,EAEnBjD,mBAFmB,CATvB;AAaE,IAAA,WAAW,EAAE,CACX;AACEjC,MAAAA,KAAK,EAAEF,qBAAqB,CAACyC,UAAD,CAD9B;AAEE0C,MAAAA,eAAe,EAAEzC,MAAM,CAAC2C;AAF1B,KADW,EAKX1D,UAAU,KAAK,WAAf,KACGL,cAAc,KAAK,MAAnB,GACG;AACEgE,MAAAA,gBAAgB,EAAE5C,MAAM,CAAC6C,MAD3B;AAEEC,MAAAA,gBAAgB,EAAEZ,wBAAWa;AAF/B,KADH,GAKG;AACEC,MAAAA,eAAe,EAAEhD,MAAM,CAAC6C,MAD1B;AAEEI,MAAAA,eAAe,EAAEf,wBAAWa;AAF9B,KANN,CALW,EAeX1D,WAfW,CAbf;AA8BE,IAAA,YAAY,EAAE;AAAEoD,MAAAA,eAAe,EAAEzD;AAAnB,KA9BhB;AA+BE,IAAA,cAAc,EAAEM,SA/BlB;AAgCE,IAAA,sBAAsB,EAAEE,gBAhC1B;AAiCE,IAAA,aAAa,EAAEN,aAjCjB;AAkCE,IAAA,kBAAkB,EAAEC,kBAlCtB;AAmCE,IAAA,mBAAmB,EAAEmC,oBAnCvB;AAoCE,IAAA,kBAAkB,EAAEE,aApCtB;AAqCE,IAAA,mBAAmB,EAAEzC,mBArCvB;AAsCE,IAAA,UAAU,EAAEgB;AAtCd,IADF,CADF,CADF,CADF,CADF;AAkDD;;AAED,MAAM0B,MAAM,GAAGS,wBAAWgB,MAAX,CAAkB;AAC/BxB,EAAAA,OAAO,EAAE;AACPyB,IAAAA,IAAI,EAAE;AADC;AADsB,CAAlB,CAAf","sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  StyleSheet,\n  I18nManager,\n  Platform,\n  BackHandler,\n  NativeEventSubscription,\n} from 'react-native';\n// eslint-disable-next-line import/no-unresolved\nimport { ScreenContainer } from 'react-native-screens';\nimport {\n  NavigationHelpersContext,\n  DrawerNavigationState,\n  DrawerActions,\n  useTheme,\n} from '@react-navigation/native';\n\nimport { GestureHandlerRootView } from './GestureHandler';\nimport SafeAreaProviderCompat from './SafeAreaProviderCompat';\nimport ResourceSavingScene from './ResourceSavingScene';\nimport DrawerContent from './DrawerContent';\nimport Drawer from './Drawer';\nimport DrawerOpenContext from '../utils/DrawerOpenContext';\nimport DrawerPositionContext from '../utils/DrawerPositionContext';\nimport useWindowDimensions from '../utils/useWindowDimensions';\nimport type {\n  DrawerDescriptorMap,\n  DrawerNavigationConfig,\n  DrawerNavigationHelpers,\n  DrawerContentComponentProps,\n} from '../types';\n\ntype Props = DrawerNavigationConfig & {\n  state: DrawerNavigationState;\n  navigation: DrawerNavigationHelpers;\n  descriptors: DrawerDescriptorMap;\n};\n\nconst getDefaultDrawerWidth = ({\n  height,\n  width,\n}: {\n  height: number;\n  width: number;\n}) => {\n  /*\n   * Default drawer width is screen width - header height\n   * with a max width of 280 on mobile and 320 on tablet\n   * https://material.io/guidelines/patterns/navigation-drawer.html\n   */\n  const smallerAxisSize = Math.min(height, width);\n  const isLandscape = width > height;\n  const isTablet = smallerAxisSize >= 600;\n  const appBarHeight = Platform.OS === 'ios' ? (isLandscape ? 32 : 44) : 56;\n  const maxWidth = isTablet ? 320 : 280;\n\n  return Math.min(smallerAxisSize - appBarHeight, maxWidth);\n};\n\nconst GestureHandlerWrapper = GestureHandlerRootView ?? View;\n\n/**\n * Component that renders the drawer.\n */\nexport default function DrawerView({\n  state,\n  navigation,\n  descriptors,\n  lazy = true,\n  drawerContent = (props: DrawerContentComponentProps) => (\n    <DrawerContent {...props} />\n  ),\n  drawerPosition = I18nManager.isRTL ? 'right' : 'left',\n  keyboardDismissMode = 'on-drag',\n  overlayColor = 'rgba(0, 0, 0, 0.5)',\n  drawerType = 'front',\n  hideStatusBar = false,\n  statusBarAnimation = 'slide',\n  drawerContentOptions,\n  drawerStyle,\n  edgeWidth,\n  gestureHandlerProps,\n  minSwipeDistance,\n  sceneContainerStyle,\n}: Props) {\n  const [loaded, setLoaded] = React.useState([state.index]);\n  const dimensions = useWindowDimensions();\n\n  const { colors } = useTheme();\n\n  const isDrawerOpen = state.history.some((it) => it.type === 'drawer');\n\n  const handleDrawerOpen = React.useCallback(() => {\n    navigation.dispatch({\n      ...DrawerActions.openDrawer(),\n      target: state.key,\n    });\n  }, [navigation, state.key]);\n\n  const handleDrawerClose = React.useCallback(() => {\n    navigation.dispatch({\n      ...DrawerActions.closeDrawer(),\n      target: state.key,\n    });\n  }, [navigation, state.key]);\n\n  React.useEffect(() => {\n    if (isDrawerOpen) {\n      navigation.emit({ type: 'drawerOpen' });\n    } else {\n      navigation.emit({ type: 'drawerClose' });\n    }\n  }, [isDrawerOpen, navigation]);\n\n  React.useEffect(() => {\n    let subscription: NativeEventSubscription | undefined;\n\n    if (isDrawerOpen) {\n      // We only add the subscription when drawer opens\n      // This way we can make sure that the subscription is added as late as possible\n      // This will make sure that our handler will run first when back button is pressed\n      subscription = BackHandler.addEventListener('hardwareBackPress', () => {\n        handleDrawerClose();\n\n        return true;\n      });\n    }\n\n    return () => subscription?.remove();\n  }, [handleDrawerClose, isDrawerOpen, navigation, state.key]);\n\n  if (!loaded.includes(state.index)) {\n    setLoaded([...loaded, state.index]);\n  }\n\n  const renderNavigationView = ({ progress }: any) => {\n    return (\n      <DrawerPositionContext.Provider value={drawerPosition}>\n        {drawerContent({\n          ...drawerContentOptions,\n          progress: progress,\n          state: state,\n          navigation: navigation,\n          descriptors: descriptors,\n        })}\n      </DrawerPositionContext.Provider>\n    );\n  };\n\n  const renderContent = () => {\n    return (\n      <ScreenContainer style={styles.content}>\n        {state.routes.map((route, index) => {\n          const descriptor = descriptors[route.key];\n          const { unmountOnBlur } = descriptor.options;\n          const isFocused = state.index === index;\n\n          if (unmountOnBlur && !isFocused) {\n            return null;\n          }\n\n          if (lazy && !loaded.includes(index) && !isFocused) {\n            // Don't render a screen if we've never navigated to it\n            return null;\n          }\n\n          return (\n            <ResourceSavingScene\n              key={route.key}\n              style={[StyleSheet.absoluteFill, { opacity: isFocused ? 1 : 0 }]}\n              isVisible={isFocused}\n            >\n              {descriptor.render()}\n            </ResourceSavingScene>\n          );\n        })}\n      </ScreenContainer>\n    );\n  };\n\n  const activeKey = state.routes[state.index].key;\n  const { gestureEnabled, swipeEnabled } = descriptors[activeKey].options;\n\n  return (\n    <NavigationHelpersContext.Provider value={navigation}>\n      <GestureHandlerWrapper style={styles.content}>\n        <SafeAreaProviderCompat>\n          <DrawerOpenContext.Provider value={isDrawerOpen}>\n            <Drawer\n              open={isDrawerOpen}\n              gestureEnabled={gestureEnabled}\n              swipeEnabled={swipeEnabled}\n              onOpen={handleDrawerOpen}\n              onClose={handleDrawerClose}\n              gestureHandlerProps={gestureHandlerProps}\n              drawerType={drawerType}\n              drawerPosition={drawerPosition}\n              sceneContainerStyle={[\n                { backgroundColor: colors.background },\n                sceneContainerStyle,\n              ]}\n              drawerStyle={[\n                {\n                  width: getDefaultDrawerWidth(dimensions),\n                  backgroundColor: colors.card,\n                },\n                drawerType === 'permanent' &&\n                  (drawerPosition === 'left'\n                    ? {\n                        borderRightColor: colors.border,\n                        borderRightWidth: StyleSheet.hairlineWidth,\n                      }\n                    : {\n                        borderLeftColor: colors.border,\n                        borderLeftWidth: StyleSheet.hairlineWidth,\n                      }),\n                drawerStyle,\n              ]}\n              overlayStyle={{ backgroundColor: overlayColor }}\n              swipeEdgeWidth={edgeWidth}\n              swipeDistanceThreshold={minSwipeDistance}\n              hideStatusBar={hideStatusBar}\n              statusBarAnimation={statusBarAnimation}\n              renderDrawerContent={renderNavigationView}\n              renderSceneContent={renderContent}\n              keyboardDismissMode={keyboardDismissMode}\n              dimensions={dimensions}\n            />\n          </DrawerOpenContext.Provider>\n        </SafeAreaProviderCompat>\n      </GestureHandlerWrapper>\n    </NavigationHelpersContext.Provider>\n  );\n}\n\nconst styles = StyleSheet.create({\n  content: {\n    flex: 1,\n  },\n});\n"]}