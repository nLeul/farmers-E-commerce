{"version":3,"sources":["Overlay.tsx"],"names":["React","Platform","StyleSheet","Animated","interpolate","interpolateDeprecated","interpolateNode","cond","greaterThan","PROGRESS_EPSILON","Overlay","forwardRef","ref","progress","style","props","animatedStyle","opacity","inputRange","outputRange","zIndex","styles","overlay","overlayStyle","select","web","WebkitTapHighlightColor","default","create","absoluteFillObject","backgroundColor"],"mappings":";;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,QAAT,EAAmBC,UAAnB,QAAqC,cAArC;AACA,OAAOC,QAAP,MAAqB,yBAArB;AAEA,MAAM;AACJC,EAAAA,WAAW,EAAEC,qBADT;AAEJ;AACAC,EAAAA,eAHI;AAIJC,EAAAA,IAJI;AAKJC,EAAAA;AALI,IAMFL,QANJ;AAQA,MAAMC,WAAyC,GAC7CE,eAD6C,aAC7CA,eAD6C,cAC7CA,eAD6C,GAC1BD,qBADrB;AAGA,MAAMI,gBAAgB,GAAG,IAAzB;AAMA,MAAMC,OAAO,gBAAGV,KAAK,CAACW,UAAN,CAAiB,SAASD,OAAT,OAE/BE,GAF+B,EAG/B;AAAA,MAFA;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,GAEA;AAAA,MAFsBC,KAEtB;;AACA,QAAMC,aAAa,GAAG;AACpBC,IAAAA,OAAO,EAAEb,WAAW,CAACS,QAAD,EAAW;AAC7BK,MAAAA,UAAU,EAAE,CAACT,gBAAD,EAAmB,CAAnB,CADiB;AAE7BU,MAAAA,WAAW,EAAE,CAAC,CAAD,EAAI,CAAJ;AAFgB,KAAX,CADA;AAKpB;AACA;AACA;AACAC,IAAAA,MAAM,EAAEb,IAAI,CAACC,WAAW,CAACK,QAAD,EAAWJ,gBAAX,CAAZ,EAA0C,CAA1C,EAA6C,CAAC,CAA9C;AARQ,GAAtB;AAWA,sBACE,oBAAC,QAAD,CAAU,IAAV,eACMM,KADN;AAEE,IAAA,GAAG,EAAEH,GAFP;AAGE,IAAA,KAAK,EAAE,CAACS,MAAM,CAACC,OAAR,EAAiBC,YAAjB,EAA+BP,aAA/B,EAA8CF,KAA9C;AAHT,KADF;AAOD,CAtBe,CAAhB;AAwBA,MAAMS,YAAY,GAAGtB,QAAQ,CAACuB,MAAT,CAAwC;AAC3DC,EAAAA,GAAG,EAAE;AACH;AACA;AACAC,IAAAA,uBAAuB,EAAE;AAHtB,GADsD;AAM3DC,EAAAA,OAAO,EAAE;AANkD,CAAxC,CAArB;AASA,MAAMN,MAAM,GAAGnB,UAAU,CAAC0B,MAAX,CAAkB;AAC/BN,EAAAA,OAAO,kCACFpB,UAAU,CAAC2B,kBADT;AAELC,IAAAA,eAAe,EAAE;AAFZ;AADwB,CAAlB,CAAf;AAOA,eAAepB,OAAf","sourcesContent":["import * as React from 'react';\nimport { Platform, StyleSheet } from 'react-native';\nimport Animated from 'react-native-reanimated';\n\nconst {\n  interpolate: interpolateDeprecated,\n  // @ts-expect-error: this property is only present in Reanimated 2\n  interpolateNode,\n  cond,\n  greaterThan,\n} = Animated;\n\nconst interpolate: typeof interpolateDeprecated =\n  interpolateNode ?? interpolateDeprecated;\n\nconst PROGRESS_EPSILON = 0.05;\n\ntype Props = React.ComponentProps<typeof Animated.View> & {\n  progress: Animated.Node<number>;\n};\n\nconst Overlay = React.forwardRef(function Overlay(\n  { progress, style, ...props }: Props,\n  ref: React.Ref<Animated.View>\n) {\n  const animatedStyle = {\n    opacity: interpolate(progress, {\n      inputRange: [PROGRESS_EPSILON, 1],\n      outputRange: [0, 1],\n    }),\n    // We don't want the user to be able to press through the overlay when drawer is open\n    // One approach is to adjust the pointerEvents based on the progress\n    // But we can also send the overlay behind the screen, which works, and is much less code\n    zIndex: cond(greaterThan(progress, PROGRESS_EPSILON), 0, -1),\n  };\n\n  return (\n    <Animated.View\n      {...props}\n      ref={ref}\n      style={[styles.overlay, overlayStyle, animatedStyle, style]}\n    />\n  );\n});\n\nconst overlayStyle = Platform.select<Record<string, string>>({\n  web: {\n    // Disable touch highlight on mobile Safari.\n    // WebkitTapHighlightColor must be used outside of StyleSheet.create because react-native-web will omit the property.\n    WebkitTapHighlightColor: 'transparent',\n  },\n  default: {},\n});\n\nconst styles = StyleSheet.create({\n  overlay: {\n    ...StyleSheet.absoluteFillObject,\n    backgroundColor: 'rgba(0, 0, 0, 0.5)',\n  },\n});\n\nexport default Overlay;\n"]}