{"version":3,"sources":["Icon.tsx"],"names":["React","View","StyleSheet","IconButton","ICON_SIZE","ICON_OFFSET","StyleContext","createContext","style","isTextInputFocused","forceFocus","IconAdornment","icon","topPosition","side","top","contextState","TextInputIcon","name","onPress","rest","useContext","onPressWithFocusControl","useCallback","styles","container","iconButton","displayName","create","position","width","height","justifyContent","alignItems","margin"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,EAAeC,UAAf,QAAuD,cAAvD;AAEA,OAAOC,UAAP,MAAuB,kBAAvB;AAaA,OAAO,MAAMC,SAAS,GAAG,EAAlB;AACP,MAAMC,WAAW,GAAG,EAApB;AAQA,MAAMC,YAAY,gBAAGN,KAAK,CAACO,aAAN,CAAsC;AACzDC,EAAAA,KAAK,EAAE,EADkD;AAEzDC,EAAAA,kBAAkB,EAAE,KAFqC;AAGzDC,EAAAA,UAAU,EAAE,MAAM,CAAE;AAHqC,CAAtC,CAArB;AAMA,OAAO,MAAMC,aAOZ,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,WAAR;AAAqBC,EAAAA,IAArB;AAA2BL,EAAAA,kBAA3B;AAA+CC,EAAAA;AAA/C,CAAD,KAAiE;AACnE,QAAMF,KAAK,GAAG;AACZO,IAAAA,GAAG,EAAEF,WADO;AAEZ,KAACC,IAAD,GAAQT;AAFI,GAAd;AAIA,QAAMW,YAAY,GAAG;AAAER,IAAAA,KAAF;AAASC,IAAAA,kBAAT;AAA6BC,IAAAA;AAA7B,GAArB;AAEA,sBACE,oBAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAEM;AAA9B,KAA6CJ,IAA7C,CADF;AAGD,CAjBM;;AAmBP,MAAMK,aAAa,GAAG,UAAuC;AAAA,MAAtC;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,GAAsC;AAAA,MAAlBC,IAAkB;;AAC3D,QAAM;AAAEZ,IAAAA,KAAF;AAASC,IAAAA,kBAAT;AAA6BC,IAAAA;AAA7B,MAA4CV,KAAK,CAACqB,UAAN,CAChDf,YADgD,CAAlD;AAIA,QAAMgB,uBAAuB,GAAGtB,KAAK,CAACuB,WAAN,CAAkB,MAAM;AACtD,QAAI,CAACd,kBAAL,EAAyB;AACvBC,MAAAA,UAAU;AACX;;AACDS,IAAAA,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO;AACR,GAL+B,EAK7B,CAACT,UAAD,EAAaD,kBAAb,EAAiCU,OAAjC,CAL6B,CAAhC;AAOA,sBACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE,CAACK,MAAM,CAACC,SAAR,EAAmBjB,KAAnB;AAAb,kBACE,oBAAC,UAAD;AACE,IAAA,IAAI,EAAEU,IADR;AAEE,IAAA,KAAK,EAAEM,MAAM,CAACE,UAFhB;AAGE,IAAA,IAAI,EAAEtB,SAHR;AAIE,IAAA,OAAO,EAAEkB;AAJX,KAKMF,IALN,EADF,CADF;AAWD,CAvBD;;AAwBAH,aAAa,CAACU,WAAd,GAA4B,gBAA5B;AAEA,MAAMH,MAAM,GAAGtB,UAAU,CAAC0B,MAAX,CAAkB;AAC/BH,EAAAA,SAAS,EAAE;AACTI,IAAAA,QAAQ,EAAE,UADD;AAETC,IAAAA,KAAK,EAAE1B,SAFE;AAGT2B,IAAAA,MAAM,EAAE3B,SAHC;AAIT4B,IAAAA,cAAc,EAAE,QAJP;AAKTC,IAAAA,UAAU,EAAE;AALH,GADoB;AAQ/BP,EAAAA,UAAU,EAAE;AACVQ,IAAAA,MAAM,EAAE;AADE;AARmB,CAAlB,CAAf;AAaA,eAAejB,aAAf","sourcesContent":["import React from 'react';\nimport { View, StyleSheet, StyleProp, ViewStyle } from 'react-native';\n\nimport IconButton from '../../IconButton';\nimport type { $Omit } from '../../../../src/types';\n\ntype Props = $Omit<\n  React.ComponentProps<typeof IconButton>,\n  'icon' | 'theme'\n> & {\n  name: string;\n  onPress?: () => void;\n  style?: StyleProp<ViewStyle>;\n  theme?: ReactNativePaper.Theme;\n};\n\nexport const ICON_SIZE = 24;\nconst ICON_OFFSET = 12;\n\ntype StyleContextType = {\n  style: StyleProp<ViewStyle>;\n  isTextInputFocused: boolean;\n  forceFocus: () => void;\n};\n\nconst StyleContext = React.createContext<StyleContextType>({\n  style: {},\n  isTextInputFocused: false,\n  forceFocus: () => {},\n});\n\nexport const IconAdornment: React.FunctionComponent<\n  {\n    testID: string;\n    icon: React.ReactNode;\n    topPosition: number;\n    side: 'left' | 'right';\n  } & Omit<StyleContextType, 'style'>\n> = ({ icon, topPosition, side, isTextInputFocused, forceFocus }) => {\n  const style = {\n    top: topPosition,\n    [side]: ICON_OFFSET,\n  };\n  const contextState = { style, isTextInputFocused, forceFocus };\n\n  return (\n    <StyleContext.Provider value={contextState}>{icon}</StyleContext.Provider>\n  );\n};\n\nconst TextInputIcon = ({ name, onPress, ...rest }: Props) => {\n  const { style, isTextInputFocused, forceFocus } = React.useContext(\n    StyleContext\n  );\n\n  const onPressWithFocusControl = React.useCallback(() => {\n    if (!isTextInputFocused) {\n      forceFocus();\n    }\n    onPress?.();\n  }, [forceFocus, isTextInputFocused, onPress]);\n\n  return (\n    <View style={[styles.container, style]}>\n      <IconButton\n        icon={name}\n        style={styles.iconButton}\n        size={ICON_SIZE}\n        onPress={onPressWithFocusControl}\n        {...rest}\n      />\n    </View>\n  );\n};\nTextInputIcon.displayName = 'TextInput.Icon';\n\nconst styles = StyleSheet.create({\n  container: {\n    position: 'absolute',\n    width: ICON_SIZE,\n    height: ICON_SIZE,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  iconButton: {\n    margin: 0,\n  },\n});\n\nexport default TextInputIcon;\n"]}